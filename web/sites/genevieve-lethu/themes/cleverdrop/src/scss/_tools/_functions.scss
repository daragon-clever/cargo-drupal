/* -------------------------------------------------------------------------- *\

  # FUNCTIONS

\* -------------------------------------------------------------------------- */

// Custom functions.

///
/// Convert a value from pixels to rem
///
/// Use the `$base-font-size` variable as a reference size for conversion
///
/// @param {number} $value - Value in pixel
///
/// @require $base-font-size
///
/// @example scss - Usage
///   .foo {
///     font-size: rem(15px);
///     width: rem(200px);
///     padding: rem(5px);
///   }
///
/// @example css - Result
///   .foo {
///     font-size: 0.9375rem;
///     width: 12.5rem;
///     padding: 0.3125rem;
///   }
///
@function rem($value, $base: $base-font-size) {
    @return calc($value / $base * 1rem);
}

///
/// Convert a value from pixels to em
///
/// Use the `$base-font-size` variable as a reference size for conversion
///
/// @param {number} $value - Value in pixel
///
/// @require $base-font-size
///
/// @example scss - Usage
///   .foo {
///     font-size: em(12px);
///     width: em(200px, 12px);
///     padding: em(5px, 12px);
///   }
///
/// @example css - Result
///   .foo {
///     font-size: 0.750em;
///     width: 16.667em;
///     padding: 0.417em;
///   }
///
@function em($px, $base: $body-font-size) {
    @return calc(($px / $base) * 1em);
}

// Replace `$search` with `$replace` in `$string`
// Used on our SVG icon backgrounds for custom forms.
//
// @author Hugo Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    @return if($index,
    str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace),
    $string);
}

///
/// Call an SVG as a background image
///
/// @param {string} $svg - SVG code
///
/// @require $svg
///
/// @example scss - Usage
///   .foo {
///     background-image: svg-url('<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 33" preserveAspectRatio="none"><defs><clipPath id="a"><path d="M0 0h320L0 33z"/></clipPath></defs><path fill="tomato" stroke="tomato" stroke-width="10" d="M0 0h320L0 33z" clip-path="url(#a)"/></svg>');
///   }
///
/// @example css - Result
///   .foo {
///     background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 320 33' preserveAspectRatio='none'%3E%3Cdefs%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h320L0 33z'/%3E%3C/clipPath%3E%3C/defs%3E%3Cpath fill='tomato' stroke='tomato' stroke-width='10' d='M0 0h320L0 33z' clip-path='url(%23a)'/%3E%3C/svg%3E");
///   }
///
@function svg-url($svg) {

    //
    //  Add missing namespace
    //
    @if not str-index($svg, xmlns) {
        $svg: str-replace($svg, '<svg', '<svg xmlns="http://www.w3.org/2000/svg"');
    }

    //
    //  Chunk up string in order to avoid
    //  "stack level too deep" error
    //
    $encoded:'';
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg)/$slice);

    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        //
        //   Encode
        //
        $chunk: str-replace($chunk, '"', '\'');
        $chunk: str-replace($chunk, '%', '%25');
        $chunk: str-replace($chunk, '&', '%26');
        $chunk: str-replace($chunk, '#', '%23');
        $chunk: str-replace($chunk, '{', '%7B');
        $chunk: str-replace($chunk, '}', '%7D');
        $chunk: str-replace($chunk, '<', '%3C');
        $chunk: str-replace($chunk, '>', '%3E');

        //
        //    The maybe list
        //
        //    Keep size and compile time down
        //    ... only add on documented fail
        //
        //  $chunk: str-replace($chunk, '|', '%7C');
        //  $chunk: str-replace($chunk, '[', '%5B');
        //  $chunk: str-replace($chunk, ']', '%5D');
        //  $chunk: str-replace($chunk, '^', '%5E');
        //  $chunk: str-replace($chunk, '`', '%60');
        //  $chunk: str-replace($chunk, ';', '%3B');
        //  $chunk: str-replace($chunk, '?', '%3F');
        //  $chunk: str-replace($chunk, ':', '%3A');
        //  $chunk: str-replace($chunk, '@', '%40');
        //  $chunk: str-replace($chunk, '=', '%3D');

        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }

    @return url("data:image/svg+xml,#{$encoded}");
}

///
/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number
///
@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}

///
/// Get unitless line-height from a pixel value
///
///
/// @param {number} $font-size - font-size value in pixels
/// @param {number} $line-height - line-height value in pixels
///
/// @require $font-size
/// @require $line-height
///
/// @example scss - Usage
///   .foo {
///     font-size: rem(12px);
///     line-height: unitless-line-height(12px, 20px);
///   }
///
/// @example css - Result
///   .foo {
///     font-size: 0.75rem;
///     line-height: 1.66667;
///   }
///
@function unitless-line-height($font-size, $line-height) {
    @return strip-unit(calc($line-height / $font-size));
}
