/* -------------------------------------------------------------------------- *\
  # GRID SYSTEM
\* -------------------------------------------------------------------------- */

// This grid is inspired by : [See documentation here](http://flexboxgrid.com/)
//
// Markup example:
// <div class="layout-container">
//  <div class="row u-align-center">
//    <div class="col-s-12 col-m-4 col-l-2">
//      <div class="box-row" style="background:#ccc">1</div>
//    </div>
//    <div class="col-s-6 col-m-6 col-l-7">
//      <div class="box-row" style="background:#eee">2</div>
//    </div>
//    <div class="col-s-6 col-m-2 col-l-3">
//      <div class="box-row" style="background:#ccc">3</div>
//    </div>
//  </div>
// </div>

@import "~sass-flex-mixin/_flex";

// The breakpoint() function is from the _breakpoints partial in _config folder
$flexboxgrid-breakpoints:
  sm em(breakpoint(sm)),
  md em(breakpoint(md)),
  lg em(breakpoint(lg)),
  xl em(breakpoint(xl)) !default;

$gutter-compensation: calc($grid-gutter * .5 * -1);
$gutter-from-m-compensation: calc($grid-from-m-gutter * .5 * -1);
$gutter-from-l-compensation: calc($grid-from-xl-gutter * .5 * -1);

$half-gutter-width: calc($grid-gutter * .5);
$half-gutter-from-m-width: calc($grid-from-m-gutter * .5);
$half-gutter-from-xl-width: calc($grid-from-xl-gutter * .5);

$gutter-breakpoints:
  md em(breakpoint(md)) $half-gutter-from-m-width,
  lg em(breakpoint(lg)) $half-gutter-from-xl-width !default;


.container-fluid {
  padding: 0 rem($grid-margin);

  @include mq($from: md) {
    padding: 0 rem($grid-from-m-margin);
  }

  @include mq($from: xl) {
    padding: 0 rem($grid-from-xl-margin);
  }
}

.container {
  max-width: rem($vw-max);
  padding: 0 rem($grid-margin);
  margin: 0 auto;

  @include mq($from: md) {
    padding: 0 rem($grid-from-m-margin);
  }

  @include mq($from: xl) {
    padding: 0 rem($grid-from-xl-margin);
  }
}

.row {
  box-sizing: border-box;
  @include flexbox();
  @include flex(0, 1, auto);
  @include flex-direction(row);
  @include flex-wrap(wrap);
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;

  @include mq($from: md) {
    margin-right: $gutter-from-m-compensation;
    margin-left: $gutter-from-m-compensation;
  }

  @include mq($from: lg) {
    margin-right: $gutter-from-l-compensation;
    margin-left: $gutter-from-l-compensation;
  }
}

.row.reverse {
  @include flex-direction(row-reverse);
}

@for $i from 1 through $grid-columns {
  .col-#{$i} {
    @include flex-grow(0);
    @include flex-shrink(0);
    @include flex-basis(calc((100% / $grid-columns) * $i));
    box-sizing: border-box;
    max-width: calc((100% / $grid-columns) * $i);
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;

    @include mq($from: md) {
      padding-right: $half-gutter-from-m-width;
      padding-left: $half-gutter-from-m-width;
    }

    @include mq($from: lg) {
      padding-right: $half-gutter-from-xl-width;
      padding-left: $half-gutter-from-xl-width;
    }
  }
}


// Default basic offset (all resolutions)
@for $i from 1 through 5 {
  .offset-#{$i} {
    @include flex-grow(0);
    @include flex-shrink(0);
    box-sizing: border-box;
    padding-right: $half-gutter-width;
    padding-left: $half-gutter-width;

    @include mq($from: md) {
      padding-right: $half-gutter-from-m-width;
      padding-left: $half-gutter-from-m-width;
    }

    @include mq($from: lg) {
      padding-right: $half-gutter-from-xl-width;
      padding-left: $half-gutter-from-xl-width;
    }

    @if $i == 0 {
      margin-left: 0;
    } @else {
      margin-left: calc((100% / $grid-columns) * $i);
    }
  }
}

// Default basic position (all resolutions)
.justify-content-start {
  @include justify-content(flex-start);
}

.justify-content-center {
  @include justify-content(center);
}

.justify-content-end {
  @include justify-content(flex-end);
}

.justify-content-around {
  @include justify-content(space-around);
}

.justify-content-between {
  @include justify-content(space-between);
}

.justify-content-stretch {
  @include justify-content(stretch);
}

.align-items-start {
  @include align-items(flex-start);
}

.align-items-center {
  @include align-items(center);
}

.align-items-end {
  @include align-items(flex-end);
}

.order-start {
  order: -1;
}

.order-end {
  order: 1;
}

// Break classes
$name: s;
@each $breakpoint in $flexboxgrid-breakpoints {
  $name: nth($breakpoint, 1);
  $size: nth($breakpoint, 2);
  @include mq($from: $size) {
    @for $i from 1 through $grid-columns {
      .col-#{$name}-#{$i} {
        @include flex-grow(0);
        @include flex-shrink(0);
        @include flex-basis(calc((100% / $grid-columns) * $i));
        box-sizing: border-box;
        max-width: calc((100% / $grid-columns) * $i);
      }
    }

    @for $i from 1 through $grid-columns {
      .offset-#{$name}-#{$i} {
        @include flex-grow(0);
        @include flex-shrink(0);
        box-sizing: border-box;

        @if $i == 0 {
          margin-left: 0;
        } @else {
          margin-left: calc((100% / $grid-columns) * $i);
        }
      }
    }

    .justify-content-start-#{$name} {
      @include justify-content(flex-start);
    }

    .justify-content-center-#{$name} {
      @include justify-content(center);
    }

    .justify-content-end-#{$name} {
      @include justify-content(flex-end);
    }

    .justify-content-around-#{$name} {
      @include justify-content(space-around);
    }

    .justify-content-between-#{$name} {
      @include justify-content(space-between);
    }

    .justify-content-stretch-#{$name} {
      @include justify-content(stretch);
    }

    .align-items-start-#{$name} {
      @include align-items(flex-start);
    }

    .align-items-center-#{$name} {
      @include align-items(center);
    }

    .align-items-end-#{$name} {
      @include align-items(flex-end);
    }

    .order-start-#{$name} {
      order: -1;
    }

    .order-end-#{$name} {
      order: 1;
    }
  }
}

@each $break in $gutter-breakpoints {
  $letter: nth($break, 1);
  $size: nth($break, 2);
  $gutter: nth($break, 3);
  @include mq($from: $size) {
    @for $i from 1 through $grid-columns {
      .col-#{$name}-#{$i} {
        padding-right: $gutter;
        padding-left: $gutter;
      }
    }

    @for $i from 1 through $grid-columns {
      .offset-#{$name}-#{$i} {
        padding-right: $gutter;
        padding-left: $gutter;
      }
    }
  }
}
